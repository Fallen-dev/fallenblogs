---
import Body from "@/Body.astro";
import Posts from "@/Posts.astro";
import TableOfContents from "@/TableOfContents.svelte";
import Date from "@/Date.astro";
import { Image } from "astro:assets";
import { getCollection, getEntry } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
      followUp: post.data.followUp,
    },
  }));
}

const { post, followUp } = Astro.props;

const followUpPost = followUp && (await getEntry(followUp));

const relatedPosts = await getCollection(
  "blog",
  ({ data: { tags }, slug }) =>
    post.slug !== slug &&
    tags.find((t) =>
      post.data.tags.find(
        (tag: string) => tag.toLowerCase() === t.toLowerCase(),
      ),
    ),
);

const { Content, headings, remarkPluginFrontmatter } = await post.render();

type Data = { slug: string; depth: number; text: string };
const toc = [] as any;

headings?.forEach((item: Data) => {
  switch (item.depth) {
    case 1:
      toc.push(item);
      break;
    case 2:
      toc.push(item);
      break;
    case 3:
      toc.push([item]);
      break;
    case 4:
      toc.push([[item]]);
      break;
    case 5:
      toc.push([[[item]]]);
      break;
    case 6:
      toc.push([[[item]]]);
      break;
  }
});
---

<Body
  title={post.data.title}
  description={post.data.description}
  publishedOn={post.data.publishedOn}
  image={post.data.image.src}
>
  <a onclick="
  history.back()
  "><p>&larr; Back</p></a>

  <section>
    <hgroup id="post-title" data-animate-container>
      <h1 class="title" data-animate>{post.data.title}</h1>
      <p style="margin-bottom: 0;" data-animate>
        <Date date={post.data.publishedOn} text="Published on" />
         &bull; {remarkPluginFrontmatter.minutesRead}
      </p>
    </hgroup>
  </section>

  <section>
    <figure id="hero" transition:name="image">
      <Image
        src={post.data.image}
        alt="Just an image"
        quality="high"
        widths={[720, 1024]}
        sizes="720px, (min-width: 1024px) 1024px"
        loading="eager"
      />
    </figure>
  </section>

  <div id="prose">
    <article class="toc">
      <h6>Table of contents</h6>
      <TableOfContents headings={toc} />
    </article>

    <details class="toc" data-onmobile>
      <summary><strong>Table of contents</strong></summary>
      <TableOfContents headings={toc} />
    </details>

    <figure id="md">
      <Content />
    </figure>
  </div>

  <section id="bottom-navigation">
    <a onclick="history.back()">&larr; Back</a>

    {
      followUpPost && (
        <a href={`/post/${followUpPost.slug}`} role="button" class="outline">
          <strong>Follow up:</strong>&ThinSpace;
          {followUpPost.data.title} &rarr;
        </a>
      )
    }
  </section>

  <Posts posts={relatedPosts} />
</Body>

<script>
  function initObserver() {
    const headings = document.querySelectorAll(
      "#md > h1, #md > h2, #md > h3, #md > h4, #md > h5, #md > h6",
    );

    function headingsObserver(entries: IntersectionObserverEntry[]) {
      entries.forEach((entry) => {
        const link = document.querySelector(
          `.toc a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) link?.classList.add("contrast");
        else link?.classList.remove("contrast");
      });
    }

    const observer = new IntersectionObserver(headingsObserver, {
      threshold: 1,
      rootMargin: "40% 0px -60% 0px",
    });

    headings.forEach((heading) => observer.observe(heading));
  }

  if (window.innerWidth > 990) initObserver();
</script>
