---
import Body from "@/Body.astro";
import Posts from "@/Posts.astro";
import Share from "@/Share.svelte";
import TableOfContents from "@/TableOfContents.svelte";
import Date from "@/Date.astro";
import { Image } from "astro:assets";
import { getCollection, getEntry } from "astro:content";
import Breadcrubms from "$lib/components/Breadcrubms.astro";

const { slug } = Astro.params;
if (typeof slug === "undefined") return Astro.redirect("/blog");

const post = await getEntry("blog", slug);
if (typeof post === "undefined") return Astro.redirect("/404");

const followUp = post.data.followUp;
const followUpPost = followUp && (await getEntry(followUp));

const relatedPosts = await getCollection(
  "blog",
  ({ data: { tags }, slug }) =>
    post.slug !== slug &&
    tags.find((t) =>
      post.data.tags.find(
        (tag: string) => tag.toLowerCase() === t.toLowerCase(),
      ),
    ),
);

const { Content, headings, remarkPluginFrontmatter } = await post.render();

type Data = { slug: string; depth: number; text: string };
const toc = [] as any;

headings?.forEach((item: Data) => {
  switch (item.depth) {
    case 1:
      toc.push(item);
      break;
    case 2:
      toc.push(item);
      break;
    case 3:
      toc.push([item]);
      break;
    case 4:
      toc.push([[item]]);
      break;
    case 5:
      toc.push([[[item]]]);
      break;
    case 6:
      toc.push([[[item]]]);
      break;
  }
});
---

<Body
  title={post.data.title}
  description={post.data.description}
  publishedOn={post.data.publishedOn}
  image={post.data.image.src}
>
  <!-- <Share
    shareData={{
      title: "Check out this article on Fallenblogs",
      text: post.data.title,
      url: Astro.url.href,
    }}
    client:load
  /> -->

  <Breadcrubms />

  <hgroup id="post-title" data-animate-container>
    <h1 class="title" data-animate>
      {post.data.title}
    </h1>
    <p style="margin-bottom: 0;" data-animate>
      {
        post.data.publishedOn ? (
          <Date date={post.data.publishedOn} showText />
        ) : (
          <span>Not published</span>
        )
      }
       &bull; {remarkPluginFrontmatter.minutesRead}
    </p>
  </hgroup>

  <section>
    <Image
      src={post.data.image}
      alt="Just an image"
      quality="high"
      widths={[720, 1024]}
      sizes="720px, (min-width: 1024px) 1024px"
      loading="eager"
    />
  </section>

  <div id="prose">
    <!-- <article class="toc">
      <h6>Table of contents</h6>
      <TableOfContents headings={toc} />
    </article> -->

    <!-- <details class="toc" data-onmobile>
      <summary><strong>Table of contents</strong></summary>
      <TableOfContents headings={toc} />
    </details> -->

    <Content />
  </div>

  <section id="bottom-navigation">
    <a href="/blog">&larr; Blogs</a>

    {
      followUpPost && (
        <a href={`/post/${followUpPost.slug}`} role="button" class="outline">
          <strong>Follow up:</strong>&ThinSpace;
          {followUpPost.data.title} &rarr;
        </a>
      )
    }
  </section>

  <Posts posts={relatedPosts} />
</Body>

<script>
  function initObserver() {
    const headings = document.querySelectorAll(
      "#md > h1, #md > h2, #md > h3, #md > h4, #md > h5, #md > h6",
    );

    function headingsObserver(entries: IntersectionObserverEntry[]) {
      entries.forEach((entry) => {
        const link = document.querySelector(
          `.toc a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) link?.classList.add("contrast");
        else link?.classList.remove("contrast");
      });
    }

    const observer = new IntersectionObserver(headingsObserver, {
      threshold: 1,
      rootMargin: "40% 0px -60% 0px",
    });

    headings.forEach((heading) => observer.observe(heading));
  }

  if (window.innerWidth > 990) initObserver();
</script>

<style>
  #mirco-actions {
    display: flex;
    justify-content: space-between;
  }
</style>
