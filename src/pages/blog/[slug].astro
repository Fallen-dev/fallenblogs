---
import { createTOC } from "$lib/utils";
import { BlogPost, Body, Date, Img, TableOfContent } from "$lib/components";
import { getCollection, getEntry } from "astro:content";

const { slug } = Astro.params;
if (typeof slug == "undefined") return Astro.redirect("/blog");

const post = await getEntry("blog", slug);
if (typeof post == "undefined") return Astro.redirect("/404");

const { Content, headings, remarkPluginFrontmatter } = await post.render();
const { minutesRead } = remarkPluginFrontmatter;
const { data } = post;

const relatedPosts = await getCollection(
  "blog",
  (blog) =>
    blog.data.date &&
    blog.data.category?.toLowerCase() == post.data.category?.toLowerCase() &&
    blog.id != post.id
);
---

<Body>
  <h1>{data.title}</h1>
  <p class="muted no-mb"><Date date={data.date} /> &bull; {minutesRead}</p>

  {
    data.category && (
      <p class="muted">
        Category:&nbsp;
        <a
          href={`/blog?search=${data.category}`}
          style="text-transform: capitalize;"
        >
          {data.category}
        </a>
      </p>
    )
  }

  <p class="muted no-mb">{data.description}</p>

  {
    data.image && (
      <>
        <Img
          src={data.image.src}
          width="800"
          alt="Cover photo"
          class="hero-img no-mb"
          style="margin-top: var(--margin-bottom);"
        />
        {data.image.credit && data.image.link && (
          <figcaption class="muted no-mb">
            {data.image.credit}.{" "}
            <a href={data.image.link} target="_blank" rel="noopener noreferrer">
              Link.
            </a>
          </figcaption>
        )}
      </>
    )
  }

  <div class="divider breakout"></div>

  <details>
    <summary aria-haspopup="listbox">Table of contents</summary>
    <div class="toc no-mb">
      <TableOfContent headings={createTOC(headings)} />
    </div>
  </details>

  <section class="md full-width">
    <Content />
  </section>

  <div class="divider breakout"></div>

  {
    relatedPosts.length > 0 && (
      <section>
        <p>
          <strong>Also read</strong>
        </p>
        <BlogPost blogs={relatedPosts} />
      </section>
    )
  }
</Body>

<script>
  import Vibrant from 'node-vibrant'

  async function generate_colors(img: HTMLImageElement|undefined) {
    if (typeof img == 'undefined') return
    
    try {
      const palette = await Vibrant.from(img.src).getPalette()
      const root = document.querySelector(':root') as HTMLElement
      const body = document.querySelector('body') as HTMLBodyElement

      root.style.setProperty('--bg-color', String(palette.DarkVibrant?.getHex()))
      root.style.setProperty('--on-bg-color', String(palette.LightVibrant?.getHex()))

      body.animate([{ height: "120vh" }], {
        delay: 450,
        duration: 750,
        easing: "ease-out",
        fill: "forwards",
        pseudoElement: "::after",
      });
    } catch (E) {
      console.error(E)
    }
  }

  const img = document.querySelector('img.hero-img') as HTMLImageElement | undefined

  if (img?.complete) generate_colors(img)
  else img && img.addEventListener('load', () => generate_colors(img))
</script>

<style>
  h1 {
    color: var(--on-bg-color, var(--color-on-background));
  }

  details {
    margin-bottom: var(--space-s);
    border: 1.5px solid var(--color-surface-variant);
    border-radius: var(--border-radius);
    cursor: pointer;
  }

  summary {
    padding: var(--space-s);
    color: var(--color-on-background);
  }

  .toc {
    max-height: 60vh;
    overflow-y: scroll;
  }

  .toc > :global(ul) {
    list-style: none;
  }

  .toc :global(li) {
    margin-inline: var(--space-s);
  }

  figcaption {
    margin-top: var(--space-s);
    font-size: var(--step--1);
    text-align: center;
  }

  .prose :global(pre) {
    grid-column: breakout;
  }

  .divider {
    margin-block: var(--space-m);
  }
</style>
