---
import { blogs } from "$lib/utils";
import { Body, Date, Img } from "$lib/components";

export const getStaticPaths = async () => {
  return blogs.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
};

const { post } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await post.render();
const { minutesRead } = remarkPluginFrontmatter;
const { data } = post;
---

<Body>
  <hgroup>
    <h1>{data.title}</h1>
    <p class="muted">{minutesRead} &bull; <Date date={data.date} /></p>
  </hgroup>

  <p class="muted">{data.description}</p>

  {
    data.image && (
      <>
        <Img
          src={data.image.src}
          width="800"
          alt="My post"
          class="hero-img no-mb"
        />
        {data.image.credit && data.image.link && (
          <figcaption class="muted no-mb">
            {data.image.credit}. <a href={data.image.link}>Link.</a>
          </figcaption>
        )}
      </>
    )
  }

  <div class="divider breakout"></div>

  <section>
    <p>
      <strong>Table of contents</strong>
    </p>
    <ul>
      {
        headings.map((heading) => {
          return (
            <li>
              &bull; <a href={`#${heading.slug}`}>{heading.text}</a>
            </li>
          );
        })
      }
    </ul>
  </section>

  <section class="md full-width">
    <Content />
  </section>
</Body>

<script>
  //@ts-ignore
  import ColorThief from "colorthief";
  //@ts-ignore
  import convert from "color-convert";

  const colorThief = new ColorThief();
  const img = document.querySelector("img.hero-img") as HTMLImageElement;

  function setBgColorOnRoot(img: HTMLImageElement) {
    const root = document.querySelector(":root") as HTMLElement;

    if (!img || !img.src) return;

    const rgb = colorThief.getColor(img);
    const hsl = convert.rgb.hsl(rgb);

    const bg_color = convert.hsl.hex(hsl[0], 20, 20);
    const on_bg_color = convert.hsl.hex(hsl[0], 100, 90);
    const on_bg_color_alt = convert.hsl.hex(hsl[0] + 180, 100, 90);

    root.style.setProperty("--bg-color", "#" + bg_color);
    root.style.setProperty("--on-bg-color", "#" + on_bg_color);
    root.style.setProperty("--on-bg-color-alt", "#" + on_bg_color_alt);

    document.querySelector("body")!.animate([{ height: "120vh" }], {
      delay: 500,
      duration: 500,
      easing: "ease-out",
      fill: "forwards",
      pseudoElement: "::after",
    });
  }

  if (img.complete) setBgColorOnRoot(img);
  else img.addEventListener("load", () => setBgColorOnRoot(img));
</script>

<style>
  h1 {
    background-image: linear-gradient(
      to right,
      var(--on-bg-color, var(--color-on-background)),
      var(--on-bg-color-alt, var(--color-on-background))
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  figcaption {
    font-size: var(--step--1);
    text-align: center;
  }

  .prose :global(pre) {
    grid-column: breakout;
  }

  .divider {
    margin-block: var(--step-s);
  }
</style>
