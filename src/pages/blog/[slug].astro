---
import { blogs } from "$lib/utils";
import { Body, Date, Img } from "$lib/components";

export const getStaticPaths = async () => {
  return blogs.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };
  });
};

const { post } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await post.render();
const { minutesRead } = remarkPluginFrontmatter;
const { data } = post;
---

<Body>
  <hgroup>
    <h1>{data.title}</h1>
    <small class="disable"
      >{minutesRead} &bull; <Date date={data.date} />
    </small>
  </hgroup>

  {
    data.image && (
      <>
        <Img
          src={data.image.src}
          width="1024"
          height="600"
          alt="My post"
          class="hero full-width"
        />
        {data.image.credit && data.image.link && (
          <figcaption>
            {data.image.credit}. <a href={data.image.link}>Link here.</a>
          </figcaption>
        )}
      </>
    )
  }

  <div class="divider breakout"></div>

  <section>
    <h5>Table of contents</h5>

    {
      headings.map((heading) => {
        return (
          <ul>
            <li>
              <h6 class="no-mb">
                <a href={`#${heading.slug}`} class="no-underline">
                  {heading.text}
                </a>
              </h6>
            </li>
          </ul>
        );
      })
    }
  </section>

  <section class="md full-width">
    <Content />
  </section>
</Body>

<script>
  //@ts-ignore
  import ColorThief from "colorthief";
  import { convert } from "colvertize";

  const colorThief = new ColorThief();
  const img = document.querySelector("img.hero") as HTMLImageElement;

  function setBgColorOnRoot(img: HTMLImageElement) {
    const root = document.querySelector(":root") as HTMLElement;

    if (!img || !img.src) return;

    const dominantRGB = colorThief.getPalette(img)[2];
    const tertiaryRGB = colorThief.getColor(img);

    const rgbToHex = (rgb: string[]) =>
      "#" +
      rgb
        .map((x) => {
          //@ts-ignore
          const hex = x.toString(16);
          return hex.length === 1 ? "0" + hex : hex;
        })
        .join("");

    const dominantHex = rgbToHex(dominantRGB);
    const dominantHSL = convert(dominantHex, "hsl");

    const tertiaryHex = rgbToHex(tertiaryRGB);
    const tertiaryHSL = convert(tertiaryHex, "hsl");

    const dh = (dominantHSL.h * 100).toFixed(2);
    const s = 12;
    const l = 18;

    const th = (tertiaryHSL.h * 100).toFixed(2);

    const bg_gradient = document.querySelector("body") as HTMLBodyElement;

    root.style.setProperty("--bg-color", `${dh}, ${s}%, ${l}%`);
    root.style.setProperty("--on-bg-color", `${dh}, 90%, 85%`);
    root.style.setProperty("--bg-color-alt", `${th}, ${s}%, ${l}%`);
    root.style.setProperty("--on-bg-color-alt", `${th}, 90%, 85%`);

    bg_gradient.animate([{ height: "0" }, { height: "120vh" }], {
      delay: 500,
      duration: 500,
      easing: "ease-out",
      fill: "forwards",
      pseudoElement: "::after",
    });
  }

  if (img.complete) {
    setBgColorOnRoot(img);
  } else {
    img.addEventListener("load", function () {
      setBgColorOnRoot(img);
    });
  }
</script>

<style>
  h1,
  h1 :not(.prose) {
    background-image: linear-gradient(
      to right,
      hsl(var(--on-bg-color, var(--on-background))),
      hsl(var(--on-bg-color-alt, var(--on-background)))
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  section {
    margin-bottom: var(--margin-bottom);
  }
  figcaption {
    margin-top: calc((var(--margin-bottom) - 0.75rem) * -1);
    margin-bottom: var(--margin-bottom);
    font-size: var(--fs-small);
    color: lightgray;
  }

  .prose :global(pre) {
    grid-column: breakout;
  }
</style>
