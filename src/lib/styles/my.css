@import url(./fonts.css);
@import url(./vars.css);
@import url(./headings.css);
@import url(./nav.css);

:root {
  --border-radius: .5rem;
  --outer-padding: 4rem;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;

  will-change: transform;
  transform: translateZ(0);
}

html {
  scroll-behavior: smooth;
  scroll-padding-top: 4rem;
}

body{
  color: var(--md-sys-color-on-background);
  background-color: var(--md-sys-color-background);
  font-family: Satoshi;
  font-weight: normal;
  font-style: normal;
  font-size: var(--fs-body);
  line-height: 1.5;
}

p {
  margin-bottom: var(--margin-bottom);
}

a {
  color: var(--md-sys-color-tertiary);
}

a:visited {
  color: inherit;
}

small {
  font-size: var(--fs-small);
}

pre {
  margin-bottom: var(--margin-bottom);
  padding: 1rem;

  font-family: Lotion, 'Courier New', Courier, monospace;
  
  border-radius: var(--border-radius);
  tab-size: 2;
}

code {
  font-family: Lotion, 'Courier New', Courier, monospace;
  font-size: 1.05rem;

  background-color: var(--md-sys-color-surface-variant);
  color: var(--md-sys-color-on-surface-variant);

  border-radius: 4px;
  padding: 4px;
}

pre > code {
  background-color: inherit;
  color: inherit;
  padding: 0px;
}

ul {
  list-style-type: 'ðŸ’š';
}

ul, ol {
  margin-bottom: var(--margin-bottom);
  padding-inline-start: 1.5rem;
}

li {
  margin-bottom: calc(var(--margin-bottom) / 2);
  padding-inline-start: 0.5rem;
}

img {
  max-width: 100%;
  height: auto;
  background-color: var(--md-sys-color-surface-variant);
  background-repeat: no-repeat;
  background-size: cover;
  font-style: italic;
  margin-bottom: 0.5rem;
  vertical-align: middle;
}

section {
  margin-bottom: 3rem;
}

section > :last-child {
  margin-bottom: 0px;
}

strong {
  font-weight: 600;
}

a[role=button] {
  text-decoration: none;
}

button, a[role=button] {
  background-color: var(--md-sys-color-primary);
  color: var(--md-sys-color-on-primary);
  font-weight: 600;
  font-size: 1.025rem;
  padding: 0.25rem .75rem;
  border-radius: 0.25rem;
  cursor: pointer;
}

button.square, a[role=button].square {
  padding: 0.25rem;
}

.container {
  --padding-outer: 1rem;
  --padding-content: 60ch;
  --padding-breakout: 80ch;
  --breakout-size: calc((var(--padding-breakout) - var(--padding-content)) / 2);

  margin-block: var(--padding-outer);

  display: grid;
  grid-template-columns: 
  [full-width-start] 
    minmax(var(--padding-outer), 1fr) 
    [breakout-start] 
      minmax(0, var(--breakout-size)) 
      [content-start] 
        min(100% - var(--padding-outer), var(--padding-content)) 
      [content-end] 
      minmax(0, var(--breakout-size)) 
    [breakout-end] 
    minmax(var(--padding-outer), 1fr) 
  [full-width-end];
}


.container > :not(.breakout, .full-width) {
  grid-column: content;
}

.container > .breakout {
  grid-column: breakout;
}

.container > .full-width {
  grid-column: full-width;
}